---
title: "Exercice2"
author: "Angel SINEAU"
format: html
editor: visual
---

## Exercices - Semaine 2

## M1 ECAP - 2023/24

```{r}
library(rvest)
library(purrr)
```

#### 1.Lancez la commande suivante :

```{r}
list_tables <- session("https://fr.wikipedia.org/wiki/Liste_des_m%C3%A9daill%C3%A9s_olympiques") |> html_elements(".wikitable") |> html_table()
```

#### Que s’est-il passé ? Que contient l’objet list_tables ?

```{r}
list_tables <- session("https://fr.wikipedia.org/wiki/Liste_des_m%C3%A9daill%C3%A9s_olympiques") |> html_elements(".wikitable") |> html_table() 
```

Nous obtenons une liste de dataframes, chaque dataframe représentant un tableau différent extrait de la page Wikipedia.

#### 2. Nous allons tout d’abord nous intéresser à la première table. Créez un objet intitulé data_medailles_sport_ete contenant le premier élément de list_tables. La table n’est pas bien formattée. Supprimez la première colonne, les noms de colonnes et la première ligne. Renommez les colonnes en c("Discipline", "Annees", "Editions", "Epreuves_2020", "Or", "Argent", "Bronze", "Total", "Athletes_medailles", "Athletes_or"). Les colonnes Editions, Epreuves_2020, Or, Argent, Bronze, Total seront converties en colonnes d’entiers.

```{r}
# Création de l'objet data_medailles_sport_ete
data_medailles_sport_ete <- list_tables[[1]]

# Suppression de la première colonne
data_medailles_sport_ete <- data_medailles_sport_ete[, -1]

# Suppression des noms de colonnes actuels et de la première ligne
colnames(data_medailles_sport_ete) <- NULL
data_medailles_sport_ete <- data_medailles_sport_ete[-1, ]

# Renommage des colonnes
colnames(data_medailles_sport_ete) <- c("Discipline", "Annees", "Editions", "Epreuves_2020", "Or", "Argent", "Bronze", "Total", "Athletes_medailles", "Athletes_or")

# Conversion des colonnes Editions, Epreuves_2020, Or, Argent, Bronze, Total en entiers
cols_to_convert <- c("Editions", "Epreuves_2020", "Or", "Argent", "Bronze", "Total")
data_medailles_sport_ete[cols_to_convert] <- lapply(data_medailles_sport_ete[cols_to_convert], as.integer)

```

#### 3.Quelles sont les 3 disciplines avec le plus de médailles distribuées depuis le début de l’histoire des jeux olympiques ?

```{r}
# Création de data_medailles_sport_ete avec le premier élément de list_tables
data_medailles_sport_ete <- list_tables[[1]]

# Suppression de la première colonne, des noms de colonnes et de la première ligne
data_medailles_sport_ete <- data_medailles_sport_ete[-1, -1]

# Renommage des colonnes
colnames(data_medailles_sport_ete) <- c("Discipline", "Annees", "Editions", "Epreuves_2020", "Or", "Argent", "Bronze", "Total", "Athletes_medailles", "Athletes_or")

# Conversion des colonnes Editions, Epreuves_2020, Or, Argent, Bronze, Total en entiers
cols_to_convert <- c("Editions", "Epreuves_2020", "Or", "Argent", "Bronze", "Total")
data_medailles_sport_ete[cols_to_convert] <- lapply(data_medailles_sport_ete[cols_to_convert], as.integer)

# Trouver les 3 disciplines avec le plus de médailles
top_disciplines <- head(data_medailles_sport_ete[order(-data_medailles_sport_ete$Total), "Discipline"], 3)

# Afficher les résultats
print("Les 3 disciplines avec le plus de médailles distribuées depuis le début de l’histoire des jeux olympiques sont :")
print(top_disciplines)

```

Ainsi, nous observons que l'Athlétisme, la Natation, et la Lutte sont les 3 disciplines avec le plus de médailles distribuées depuis le début de l’histoire des jeux olympiques.

#### 4.Quelles sont les disciplines avec le moins d’épreuves en 2020 ?

```{r}
# Trier les données par le nombre d'épreuves en 2020
data_triée <- data_medailles_sport_ete[order(data_medailles_sport_ete$Epreuves_2020), ]

# Sélectionner les disciplines avec le moins d'épreuves
disciplines_moins_epreuves <- head(data_triée)

# Afficher les résultats
print(disciplines_moins_epreuves$Discipline)

```

Les disciplines avec le moins d'épreuves en 2020 sont :

-   Le Football

-   Le Golf

-   Le Handball

-   Le Hockey sur gazon

-   La Natation sychronisée

-   Le pentathlon moderne.

#### 5. La colonne Editions nous renseigne sur le nombre total d’apparence des disciplines aux JO d’été. Nous souhaitons vérifier ce calcul en implémentant notre propre fonction calcul_nb_editions_int. Dans un premier temps, la fonction calcul_nb_editions prendra en entrée un paramètre depuis, de type entier, qui représente depuis quelle année la discipline est au programme.

```{r}
calcul_nb_editions_int <- function(depuis) {
    # Années des jeux olympiques d'été, avec les annulations de 1940 et 1944
    jeux_olympiques_annees <- seq(1896, 2020, by = 4)
    jeux_olympiques_annees <- jeux_olympiques_annees[!jeux_olympiques_annees %in% c(1940, 1944)]
    
    # Compter le nombre d'éditions depuis l'année spécifiée
    nombre_editions <- sum(jeux_olympiques_annees >= depuis)
    
    return(nombre_editions)
}

```

#### 6. Dans certains cas, les disciplines ont été au programme de façon discontinue. Proposez une nouvelle fonction calcul_nb_editions_str qui prendra cette fois-ci en entrée des chaînes de caractères. Par exemple, l’appel suivant: calcul_nb_editions_str("1896, 1904, depuis 1920") retournera la valeur 26.

```{r}
calcul_nb_editions_str <- function(chaine_annees) {
    # Années des jeux olympiques d'été, avec les annulations de 1940 et 1944
    jeux_olympiques_annees <- seq(1896, 2020, by = 4)
    jeux_olympiques_annees <- jeux_olympiques_annees[!jeux_olympiques_annees %in% c(1940, 1944)]
    
    # Découper la chaîne de caractères en morceaux
    annees_parts <- strsplit(chaine_annees, ", ")[[1]]
    
    # Initialiser un vecteur pour stocker toutes les années mentionnées
    toutes_annees <- numeric(0)
    
    for (part in annees_parts) {
        if (grepl("depuis", part)) {
            # Extraire l'année et ajouter toutes les années depuis cette année
            depuis_annee <- as.numeric(sub("depuis ", "", part))
            toutes_annees <- c(toutes_annees, jeux_olympiques_annees[jeux_olympiques_annees >= depuis_annee])
        } else {
            # Ajouter l'année spécifique
            toutes_annees <- c(toutes_annees, as.numeric(part))
        }
    }
    
    # Compter les éditions uniques
    nombre_editions <- length(unique(toutes_annees))
    
    return(nombre_editions)
}

# Test de la fonction
calcul_nb_editions_str("1896, 1904, depuis 1920")

```

#### 7. Définissez une fonction générique calcul_nb_editions et deux implémentations calcul_nb_editions.integer et ‘calcul_nb_editions.character. Quels résultats donnent les appels : calcul_nb_editions(2000) calcul_nb_editions("1904–1924, depuis 1948") ?

```{r}
calcul_nb_editions_str <- function(chaine_annees) {
    # Années des jeux olympiques d'été, avec les annulations de 1940 et 1944
    jeux_olympiques_annees <- seq(1896, 2020, by = 4)
    jeux_olympiques_annees <- jeux_olympiques_annees[!jeux_olympiques_annees %in% c(1940, 1944)]
    
    # Découper la chaîne de caractères en morceaux
    annees_parts <- strsplit(chaine_annees, ", ")[[1]]
    
    # Initialiser un vecteur pour stocker toutes les années mentionnées
    toutes_annees <- numeric(0)
    
    for (part in annees_parts) {
        if (grepl("depuis", part)) {
            # Extraire l'année et ajouter toutes les années depuis cette année
            depuis_annee <- as.numeric(sub("depuis ", "", part))
            toutes_annees <- c(toutes_annees, jeux_olympiques_annees[jeux_olympiques_annees >= depuis_annee])
        } else {
            # Ajouter l'année spécifique
            toutes_annees <- c(toutes_annees, as.numeric(part))
        }
    }
    
    # Compter les éditions uniques
    nombre_editions <- length(unique(toutes_annees))
    
    return(nombre_editions)
}

# Test de la fonction
calcul_nb_editions_str("1896, 1904, depuis 1920")

# Fonction générique
calcul_nb_editions <- function(x) {
    UseMethod("calcul_nb_editions", x)
}

# Implémentation pour integer
calcul_nb_editions.integer <- function(depuis) {
    jeux_olympiques_annees <- seq(1896, 2020, by = 4)
    jeux_olympiques_annees <- jeux_olympiques_annees[!jeux_olympiques_annees %in% c(1940, 1944)]
    sum(jeux_olympiques_annees >= depuis)
}

# Implémentation pour character
calcul_nb_editions.character <- function(periodes) {
    jeux_olympiques_annees <- seq(1896, 2020, by = 4)
    jeux_olympiques_annees <- jeux_olympiques_annees[!jeux_olympiques_annees %in% c(1940, 1944)]
    periodes <- gsub("depuis ", "", periodes)
    periodes <- gsub("–", "-", periodes)
    periodes_separes <- unlist(strsplit(periodes, ", "))
    total <- 0
    for (periode in periodes_separes) {
        if (grepl("-", periode)) {
            annees <- as.numeric(unlist(strsplit(periode, "-")))
            total <- total + sum(jeux_olympiques_annees >= annees[1] & jeux_olympiques_annees <= annees[2])
        } else {
            total <- total + sum(jeux_olympiques_annees >= as.numeric(periode))
        }
    }
    return(total)
}

# Tests des fonctions
print(calcul_nb_editions(2000L))  


```

Ces fonctions calculeront le nombre d'éditions des Jeux Olympiques d'été auxquelles une discipline a participé, soit depuis une année donnée (integer), soit pendant des périodes spécifiées (character).

Les appels **`calcul_nb_editions(2000)`** et **`calcul_nb_editions("1904-1924, depuis 1948")`** nous donnent respectivement le nombre d'éditions depuis l'année 2000 et pour les périodes 1904-1924 et depuis 1948, soit 6 éditions.

#### 8. En Athlétisme, le Finlandais Paavo Nurmi détient le record de médailles avec 12 médailles obtenues lors des JO d’hiver. Implémentez une fonction calcul_medailles_individuelles qui détermine le nombre de médaille maximal a été obtenu par un athlète lors d’olympiades. Note : s’il y a plusieurs athlètes à égalité, alors la cellule comporte plusieurs éléments, et une manipulation de la chaîne de caractères est nécessaire.

```{r}
calcul_medailles_individuelles <- function(info_medailles) {
    # Séparer les athlètes s'il y en a plusieurs
    athletes <- unlist(strsplit(info_medailles, ","))
    
    # Extraire les nombres de médailles et convertir en entiers
    nombre_medailles <- sapply(athletes, function(athlete) {
        if(grepl("\\d+", athlete)) {
            max(as.numeric(unlist(regmatches(athlete, gregexpr("\\d+", athlete)))))
        } else {
            0
        }
    })
    
    # Déterminer le nombre maximal de médailles
    max_medailles <- max(nombre_medailles)
    
    return(max_medailles)
}

```

Cette fonction permettra de déterminer le nombre maximal de médailles obtenues par un athlète, même dans des cellules où plusieurs athlètes sont mentionnés.

#### 9. Quel est le top 3 des athlètes ? Vous utiliserez la fonction lapply pour appliquer la fonction calcul_medailles_individuelles à chaque élément de la colonne Athletes_medailles.

```{r}
calcul_medailles_individuelles <- function(medailles) {
    # Vérifier si l'entrée est NA
    if (is.na(medailles)) {
        return(NA)
    }
    
    # Séparer les entrées pour chaque athlète
    athletes <- strsplit(medailles, ", ")[[1]]
    
    # Initialiser un vecteur pour stocker le nombre total de médailles par athlète
    nombre_medailles_total <- numeric(length(athletes))

    # Boucle sur chaque athlète pour extraire le nombre total de médailles
    for (i in seq_along(athletes)) {
        # Extraire les nombres de médailles de l'athlète courant
        medailles_athlete <- unlist(strsplit(athletes[i], " "))

        # Convertir les nombres en entiers et sommer
        nombre_medailles_total[i] <- sum(as.numeric(medailles_athlete[sapply(medailles_athlete, is.numeric)]))
    }

    # Retourner le nombre maximal de médailles
    max(nombre_medailles_total, na.rm = TRUE)
}

# Appliquer la fonction à chaque élément de la colonne Athletes_medailles
top_medailles <- lapply(data_medailles_sport_ete$Athletes_medailles, calcul_medailles_individuelles)

# Déterminer le top 3 des athlètes
top_3 <- sort(unlist(top_medailles), decreasing = TRUE)[1:3]

# Afficher le top 3
print(top_3)
```

#### 10. Quels sont les 3 nationalités les plus représentées, pour toutes les épreuves, au classement du nombre de médailles d’or individuelles reccueillies ? • Pour ce faire, vous implémenterez une fonction extraire_nationalite_athlete qui à partir d’une chaine de charactère extraira le nombre d’athlète et leur nationalité. Par exemple, la chaine de caractère “Paavo Nurmi (FIN) (9-3-0) Carl Lewis (USA) (9-1-0)” donnera en sortie c("FIN" = 1, "USA" = 1). • Vous utilisez la fonction lapply pour appliquer la fonction à toute la colonne 2 • Vous agrégerez les résultats de manière à sommer toutes les lignes et à obtenir les 3 nations les plus représentées, et leur effectif.

```{r}
# Définition de la fonction
extraire_nationalite_athlete <- function(texte) {
    # Extraire les codes de nationalité et les occurences d'athlètes
    # Le code ici dépend de la structure exacte de vos données
    # Par exemple, vous pouvez utiliser des expressions régulières pour extraire les informations nécessaires
}

# Application de la fonction à la colonne
resultats <- lapply(data_medailles_sport_ete$Athletes_medailles, extraire_nationalite_athlete)

# Agrégation des résultats
nationalites <- table(unlist(resultats))

# Tri et identification des trois premières nationalités
top3_nationalites <- sort(nationalites, decreasing = TRUE)[1:3]

```

#### 11. Intéressez-vous désormais au deuxième tableau contenu dans list_tables, faisant référence aux JO d’hiver. Appliquez les fonctions calcul_medailles_individuelles et extraire_nationalite_athlete aux deux dernières colonnes, à la manière des questions 9 et 10. Cette fois-ci, vous utiliserez la fonction appropriée du package purrr en lieu et place de lapply. Quelles sont les résultats ? Quelle différence voyez-vous entre lapply et les fonctions de purrr ?

```{r}
library(purrr)

# Supposons que data_medailles_hiver est le deuxième tableau de list_tables
data_medailles_hiver <- list_tables[[2]]

# Application de calcul_medailles_individuelles sur la colonne appropriée
top_medailles_hiver <- map_int(data_medailles_hiver$Athletes_medailles, calcul_medailles_individuelles)

# Application de extraire_nationalite_athlete sur la colonne appropriée
nationalites_hiver <- map(data_medailles_hiver$Athletes_medailles, extraire_nationalite_athlete)

# Traitement supplémentaire si nécessaire pour obtenir le résultat souhaité
# Par exemple, vous pouvez utiliser reduce pour combiner les résultats de nationalites_hiver

# Affichage des résultats
print(top_medailles_hiver)
print(nationalites_hiver)

```
