{
  "hash": "31265a067f5864291ba5007ecdd24242",
  "result": {
    "markdown": "---\ntitle: \"Exercice3\"\nauthor: \"Angel SINEAU\"\nformat: html\neditor: visual\n---\n\n\n## Exercices - Semaine 3\n\n## M1 ECAP - 2023/24\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stringr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: le package 'stringr' a été compilé avec la version R 4.3.3\n```\n:::\n\n```{.r .cell-code}\nlibrary(lubridate)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: le package 'lubridate' a été compilé avec la version R 4.3.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttachement du package : 'lubridate'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLes objets suivants sont masqués depuis 'package:base':\n\n    date, intersect, setdiff, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(arrow)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nThe tzdb package is not installed. Timezones will not be available to Arrow compute functions.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttachement du package : 'arrow'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nL'objet suivant est masqué depuis 'package:lubridate':\n\n    duration\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nL'objet suivant est masqué depuis 'package:utils':\n\n    timestamp\n```\n:::\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: le package 'dplyr' a été compilé avec la version R 4.3.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttachement du package : 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLes objets suivants sont masqués depuis 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLes objets suivants sont masqués depuis 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: le package 'tidyr' a été compilé avec la version R 4.3.3\n```\n:::\n\n```{.r .cell-code}\nlibrary(jsonlite)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: le package 'jsonlite' a été compilé avec la version R 4.3.3\n```\n:::\n\n```{.r .cell-code}\nlibrary(RSQLite)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: le package 'RSQLite' a été compilé avec la version R 4.3.3\n```\n:::\n:::\n\n\n### Import et lecture des données\n\n#### 1.Listez les fichiers présents dans le dossier data. Quelles sont les extensions des différents fichiers ?\n\n-   Le fichier **data**, extension **sqlite**\n\n-   Le fichier **olympics_athletes**, extension **json**\n\n-   Le fichier **tokyo_athletes**, extension **parquet**\n\n#### 2.Lisez le fichier .parquet en utilisant la librairie arrow. Quelles sont les dimensions de la table ? Quelles sont les colonnes présentes ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Remplacez \"chemin/vers/votre/fichier.parquet\" par le chemin de votre fichier\ntokyo_athletes <- read_parquet(\"tokyo_athletes.parquet\")\n\n# Obtenir les dimensions de la table\ndimensions <- dim(tokyo_athletes)\n\n# Lister les noms des colonnes\nnoms_colonnes <- colnames(tokyo_athletes)\n\n# Afficher les résultats\nprint(paste(\"Dimensions de la table : Nombre de lignes =\", dimensions[1], \", Nombre de colonnes =\", dimensions[2]))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Dimensions de la table : Nombre de lignes = 11085 , Nombre de colonnes = 3\"\n```\n:::\n\n```{.r .cell-code}\nprint(\"Noms des colonnes :\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Noms des colonnes :\"\n```\n:::\n\n```{.r .cell-code}\nprint(noms_colonnes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Name\"       \"NOC\"        \"Discipline\"\n```\n:::\n:::\n\n\nLe fichier **tokyo_athletes** contient 3 colonnes, et 11 085 lignes.\n\nLes 3 colonnes sont \"**Name**\", \"**NOC**\" et \"**Discipline**.\n\n#### 3. Lisez le fichier .json en utilisant la librairie jsonlite. Quelles sont les dimensions de la table ? Quelles sont les colonnes présentes ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nolympics_athletes <- fromJSON(\"olympics_athletes.json\")\n\n# Obtenir les dimensions de la table\ndimensions <- dim(olympics_athletes)\n\n# Lister les noms des colonnes\nnoms_colonnes <- colnames(olympics_athletes)\n\n# Afficher les résultats\nprint(paste(\"Dimensions de la table : Nombre de lignes =\", dimensions[1], \", Nombre de colonnes =\", dimensions[2]))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Dimensions de la table : Nombre de lignes = 269731 , Nombre de colonnes = 13\"\n```\n:::\n\n```{.r .cell-code}\nprint(\"Noms des colonnes :\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Noms des colonnes :\"\n```\n:::\n\n```{.r .cell-code}\nprint(noms_colonnes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"ID\"     \"Name\"   \"Sex\"    \"Age\"    \"Height\" \"Weight\" \"Team\"   \"NOC\"   \n [9] \"Games\"  \"City\"   \"Sport\"  \"Event\"  \"Medal\" \n```\n:::\n:::\n\n\nLe fichier **olympics_athletes** contient 13 colonnes, et 269 731 lignes.\n\nLes 13 colonnes sont :\n\n```         \n\"ID\"     \"Name\"   \"Sex\"    \"Age\"    \"Height\" \"Weight\" \"Team\"   \"NOC\"    \"Games\"  \"City\"   \"Sport\"  \"Event\"  \"Medal\"\n```\n\n#### 4. Importez la librairie RSQLite, et ouvrez une connexion à la base de données sqlite en utilisant la fonction dbConnect. Le driver à utiliser sera SQLite(). Quelles sont les tables présentes dans la table ? Vous pourrez utiliser la fonction dbListTables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- dbConnect(SQLite(), dbname = \"data.sqlite\")\n\ntables <- dbListTables(data)\n\nprint(\"Tables présentes dans la base de données :\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Tables présentes dans la base de données :\"\n```\n:::\n\n```{.r .cell-code}\nprint(tables)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"tokyo_medals\" \"tokyo_teams\" \n```\n:::\n:::\n\n\nDeux tables sont présentes : **\"tokyo_medals\"** et **\"tokyo_teams\"**.\n\n#### 5. Créez deux nouvelles tables dans la base de données à l’aide de la fonction dbWriteTable. Les tables s’appeleront respectivement olympics_athletes et tokyo_athletes pour les fichiers olympics_athletes.json et tokyo_athletes.parquet.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbWriteTable(data, \"olympics_athletes\", olympics_athletes)\ndbWriteTable(data, \"tokyo_athletes\", tokyo_athletes)\n\n#Affichage des résultats\ntables <- dbListTables(data)\n\nprint(\"Tables présentes dans la base de données :\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Tables présentes dans la base de données :\"\n```\n:::\n\n```{.r .cell-code}\nprint(tables)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"olympics_athletes\" \"tokyo_athletes\"    \"tokyo_medals\"     \n[4] \"tokyo_teams\"      \n```\n:::\n:::\n\n\n#### 6. Inspectez la table olympics_athletes en utilisant la fonction dbListFields. Quelles sont les colonnes de la table ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolonnes <- dbListFields(data, \"olympics_athletes\")\n\nprint(\"Colonnes de la table olympics_athletes :\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Colonnes de la table olympics_athletes :\"\n```\n:::\n\n```{.r .cell-code}\nprint(colonnes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"ID\"     \"Name\"   \"Sex\"    \"Age\"    \"Height\" \"Weight\" \"Team\"   \"NOC\"   \n [9] \"Games\"  \"City\"   \"Sport\"  \"Event\"  \"Medal\" \n```\n:::\n:::\n\n\nLes colonnes sont les suivantes :\n\n```         \n\"ID\"     \"Name\"   \"Sex\"    \"Age\"    \"Height\" \"Weight\" \"Team\"   \"NOC\"    \"Games\"  \"City\"   \"Sport\"  \"Event\"  \"Medal\" \n```\n\n#### 7. Importez cette table depuis la base de données en utilisant la fonction dbReadTable. Convertissez la table en tibble en utilisant la fonction as_tibble.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nolympics_athletes <- dbReadTable(data, \"olympics_athletes\")\n\n\nolympics_athletes_tibble <- as_tibble(olympics_athletes)\n```\n:::\n\n\n### dplyr, tidyr\n\n#### Dans les questions suivantes, utilisez en priorité les fonctions des packages dplyr, tidyr.\n\n#### \n\n#### 8. Convertissez la colonne Sex en variable catégorielle avec la fonction mutate.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nolympics_athletes_tibble <- olympics_athletes_tibble %>%\n                            mutate(Sex = as.factor(Sex))\n```\n:::\n\n\n#### 9. Créez deux colonnes à partir de la colonne Games. La première colonne Year sera une colonne de type integer contenant l’année des jeux. La deuxième colonne isSummer sera une colonne booléenne qui indiquera si les jeux sont des jeux d’été ou d’hiver. Vous pourrez utiliser la fonction separate_wider_delim de tidyr notamment. Les questions suivantes nécessitent l’application de plusieurs instructions en séquence. Essayez tant que possible de chaîner les instructions avec des pipes (%\\>% ou \\|\\>).\n\n#### \n\n\n::: {.cell}\n\n```{.r .cell-code}\nolympics_athletes_tibble <- olympics_athletes_tibble %>%\n  # Séparation de la colonne 'Games' en 'Year' et 'Season'\n  separate(Games, into = c(\"Year\", \"Season\"), sep = \" \") %>%\n  # Conversion de 'Year' en entier\n  mutate(Year = as.integer(Year),\n         # Création d'une colonne booléenne pour 'isSummer'\n         isSummer = ifelse(Season == \"Summer\", TRUE, FALSE)) %>%\n  # Suppression de la colonne 'Season' car elle n'est plus nécessaire\n  select(-Season)\n```\n:::\n\n\n#### 10. Calculez la moyenne d’age des athletes pour chacune des éditions des JO d’été. Quelle édition a compté les athlètes les plus jeunes ? Les plus vieux ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calcul de la moyenne d'âge pour chaque édition des JO d'été\nage_moyen_par_edition <- olympics_athletes_tibble %>%\n  filter(isSummer) %>%\n  group_by(Year) %>%\n  summarize(MoyenneAge = mean(Age, na.rm = TRUE))\n\n# Trouver l'édition avec les athlètes les plus jeunes\nedition_jeunes <- age_moyen_par_edition[which.min(age_moyen_par_edition$MoyenneAge), ]\n\n# Trouver l'édition avec les athlètes les plus vieux\nedition_vieux <- age_moyen_par_edition[which.max(age_moyen_par_edition$MoyenneAge), ]\n\n# Afficher les résultats\nprint(\"Édition avec les athlètes les plus jeunes :\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Édition avec les athlètes les plus jeunes :\"\n```\n:::\n\n```{.r .cell-code}\nprint(edition_jeunes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n   Year MoyenneAge\n  <int>      <dbl>\n1  1896       23.6\n```\n:::\n\n```{.r .cell-code}\nprint(\"Édition avec les athlètes les plus vieux :\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Édition avec les athlètes les plus vieux :\"\n```\n:::\n\n```{.r .cell-code}\nprint(edition_vieux)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n   Year MoyenneAge\n  <int>      <dbl>\n1  1932       30.2\n```\n:::\n:::\n\n\nL'édition avec les athlètes les plus jeunes est celle de 1896, avec une moyenne d'âge des participants de 23.6 ans.\n\nL'édition avec les athlètes les plus vieux est celle de 1932, avec une moyenne d'âge des participants de 30.2 ans.\n\n#### 11. Quelle est la discipline des JO d’été dont la taille des athlètes féminines est la plus grande ? Quelle a été cette discipline au cours de chacune des éditions ? Calculez le nombre de fois où chaque discipline a été la discipline avec les plus grandes athlètes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1. Discipline avec la taille moyenne des athlètes féminines la plus grande sur tous les JO d'été\ndiscipline_taille_max_femmes <- olympics_athletes_tibble %>%\n  filter(Sex == \"F\", isSummer) %>%\n  group_by(Sport) %>%\n  summarize(TailleMoyenne = mean(Height, na.rm = TRUE)) %>%\n  arrange(desc(TailleMoyenne)) %>%\n  top_n(1, TailleMoyenne)\n\n# 2. Discipline avec les athlètes féminines les plus grandes pour chaque édition des JO d'été\ndiscipline_par_edition <- olympics_athletes_tibble %>%\n  filter(Sex == \"F\", isSummer) %>%\n  group_by(Year, Sport) %>%\n  summarize(TailleMoyenne = mean(Height, na.rm = TRUE), .groups = 'drop') %>%\n  arrange(Year, desc(TailleMoyenne)) %>%\n  group_by(Year) %>%\n  slice(1)\n\n# 3. Compter le nombre de fois où chaque discipline a été en tête\nnombre_fois_en_tete <- discipline_par_edition %>%\n  count(Sport) %>%\n  arrange(desc(n))\n\n# Affichage des résultats\nprint(\"Discipline avec la plus grande taille moyenne des athlètes féminines sur tous les JO d'été :\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Discipline avec la plus grande taille moyenne des athlètes féminines sur tous les JO d'été :\"\n```\n:::\n\n```{.r .cell-code}\nprint(discipline_taille_max_femmes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  Sport      TailleMoyenne\n  <chr>              <dbl>\n1 Basketball          182.\n```\n:::\n\n```{.r .cell-code}\nprint(\"Discipline avec les athlètes féminines les plus grandes par édition des JO d'été :\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Discipline avec les athlètes féminines les plus grandes par édition des JO d'été :\"\n```\n:::\n\n```{.r .cell-code}\nprint(discipline_par_edition)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 28 × 3\n# Groups:   Year [28]\n    Year Sport    TailleMoyenne\n   <int> <chr>            <dbl>\n 1  1900 Croquet           NaN \n 2  1904 Archery           NaN \n 3  1906 Tennis            NaN \n 4  1908 Archery           NaN \n 5  1912 Diving            NaN \n 6  1920 Swimming          166.\n 7  1924 Fencing           168.\n 8  1928 Fencing           172.\n 9  1932 Fencing           173.\n10  1936 Fencing           178 \n# ℹ 18 more rows\n```\n:::\n\n```{.r .cell-code}\nprint(\"Nombre de fois où chaque discipline a été en tête pour la taille des athlètes féminines :\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Nombre de fois où chaque discipline a été en tête pour la taille des athlètes féminines :\"\n```\n:::\n\n```{.r .cell-code}\nprint(nombre_fois_en_tete)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 28 × 3\n# Groups:   Year [28]\n    Year Sport        n\n   <int> <chr>    <int>\n 1  1900 Croquet      1\n 2  1904 Archery      1\n 3  1906 Tennis       1\n 4  1908 Archery      1\n 5  1912 Diving       1\n 6  1920 Swimming     1\n 7  1924 Fencing      1\n 8  1928 Fencing      1\n 9  1932 Fencing      1\n10  1936 Fencing      1\n# ℹ 18 more rows\n```\n:::\n:::\n\n\n### Fonctions stringr, lubridate :\n\n#### Vous disposez du texte suivant :\n\n#### Les jeux olympiques d’été se déroulent normalement tous les 4 ans, durant les mois de Juillet et Août. Les jeux de Rio ont eu lieu du 5 Août 2016 au 20 Août 2016, ceux de Tokyo du 23 Juillet 2021 au 8 Août 2021, et ceux de Paris auront lieu du 26 Juillet 2024 au 11 Août 2024. Plus de 10000 athlètes sont attendus du monde entier à Paris.\n\n#### \n\n#### \n\n#### 12. En utilisant les fonctions du packages stringr, extrayez les dates des différentes éditions des JO. Aide : définissez une expression régulière capable de capturer une séquence de caractères représentant une date telle que “26 Juillet 2024”. Vous pourrez utiliser cette regex avec la fonction str_extract_all par exemple.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntexte <- \"Les jeux olympiques d’été se déroulent normalement tous les 4 ans, durant les mois de Juillet et Août. Les jeux de Rio ont eu lieu du 5 Août 2016 au 20 Août 2016, ceux de Tokyo du 23 Juillet 2021 au 8 Août 2021, et ceux de Paris auront lieu du 26 Juillet 2024 au 11 Août 2024. Plus de 10000 athlètes sont attendus du monde entier à Paris.\"\n\n# Expressions régulières pour chaque ville\nregex_rio <- \"Rio.*?\\\\d{1,2} [A-Za-z]+ \\\\d{4}\"\nregex_tokyo <- \"Tokyo.*?\\\\d{1,2} [A-Za-z]+ \\\\d{4}\"\nregex_paris <- \"Paris.*?\\\\d{1,2} [A-Za-z]+ \\\\d{4}\"\n\n# Extraction des dates\ndates_rio <- str_extract_all(texte, regex_rio, simplify = TRUE)\ndates_tokyo <- str_extract_all(texte, regex_tokyo, simplify = TRUE)\ndates_paris <- str_extract_all(texte, regex_paris, simplify = TRUE)\n\n# Affichage des résultats\nprint(\"Dates des jeux de Rio :\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Dates des jeux de Rio :\"\n```\n:::\n\n```{.r .cell-code}\nprint(dates_rio)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1]                                                                              \n[1,] \"Rio ont eu lieu du 5 Août 2016 au 20 Août 2016, ceux de Tokyo du 23 Juillet 2021\"\n```\n:::\n\n```{.r .cell-code}\nprint(\"Dates des jeux de Tokyo :\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Dates des jeux de Tokyo :\"\n```\n:::\n\n```{.r .cell-code}\nprint(dates_tokyo)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1]                      \n[1,] \"Tokyo du 23 Juillet 2021\"\n```\n:::\n\n```{.r .cell-code}\nprint(\"Dates des jeux de Paris :\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Dates des jeux de Paris :\"\n```\n:::\n\n```{.r .cell-code}\nprint(dates_paris)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1]                                  \n[1,] \"Paris auront lieu du 26 Juillet 2024\"\n```\n:::\n:::\n\n\n#### 13. Remplacez les noms des mois par leur numéro pour rendre ces éléments convertibles en date en utilisant la fonction str_replace.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Remplacement des noms des mois par leurs numéros\nmois_replacement <- c(\"Janvier\" = \"01\", \"Février\" = \"02\", \"Mars\" = \"03\", \"Avril\" = \"04\", \n                      \"Mai\" = \"05\", \"Juin\" = \"06\", \"Juillet\" = \"07\", \"Août\" = \"08\",\n                      \"Septembre\" = \"09\", \"Octobre\" = \"10\", \"Novembre\" = \"11\", \"Décembre\" = \"12\")\n\n# Extraction des dates pour Rio, Tokyo et Paris (réutilisation du code de la question précédente)\n# ...\n\n# Remplacement des noms des mois dans les dates extraites\ndates_rio <- str_replace_all(dates_rio, mois_replacement)\ndates_tokyo <- str_replace_all(dates_tokyo, mois_replacement)\ndates_paris <- str_replace_all(dates_paris, mois_replacement)\n\n# Affichage des résultats\nprint(\"Dates des jeux de Rio avec mois numérotés :\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Dates des jeux de Rio avec mois numérotés :\"\n```\n:::\n\n```{.r .cell-code}\nprint(dates_rio)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Rio ont eu lieu du 5 08 2016 au 20 08 2016, ceux de Tokyo du 23 07 2021\"\n```\n:::\n\n```{.r .cell-code}\nprint(\"Dates des jeux de Tokyo avec mois numérotés :\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Dates des jeux de Tokyo avec mois numérotés :\"\n```\n:::\n\n```{.r .cell-code}\nprint(dates_tokyo)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Tokyo du 23 07 2021\"\n```\n:::\n\n```{.r .cell-code}\nprint(\"Dates des jeux de Paris avec mois numérotés :\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Dates des jeux de Paris avec mois numérotés :\"\n```\n:::\n\n```{.r .cell-code}\nprint(dates_paris)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Paris auront lieu du 26 07 2024\"\n```\n:::\n:::\n\n\n#### 14. Convertissez ces 3 éléments en date en utilisant la fonction appropriée du package lubridate.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Conversion en dates\nconvert_to_date <- function(dates) {\n  dates <- unlist(dates)\n  lapply(dates, function(date) dmy(date))\n}\n\ndates_rio <- convert_to_date(dates_rio)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: All formats failed to parse. No formats found.\n```\n:::\n\n```{.r .cell-code}\ndates_tokyo <- convert_to_date(dates_tokyo)\ndates_paris <- convert_to_date(dates_paris)\n\n# Affichage des résultats\nprint(\"Dates des jeux de Rio converties en dates :\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Dates des jeux de Rio converties en dates :\"\n```\n:::\n\n```{.r .cell-code}\nprint(dates_rio)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] NA\n```\n:::\n\n```{.r .cell-code}\nprint(\"Dates des jeux de Tokyo converties en dates :\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Dates des jeux de Tokyo converties en dates :\"\n```\n:::\n\n```{.r .cell-code}\nprint(dates_tokyo)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"2021-07-23\"\n```\n:::\n\n```{.r .cell-code}\nprint(\"Dates des jeux de Paris converties en dates :\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Dates des jeux de Paris converties en dates :\"\n```\n:::\n\n```{.r .cell-code}\nprint(dates_paris)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"2024-07-26\"\n```\n:::\n:::\n\n\n#### 15. Combien de jours ont séparés les éditions de Rio et Tokyo ? Et sépareront les éditions de Tokyo et de Paris ? Faites le même calcul en semaines.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfin_rio <- max(unlist(dates_rio))\ndebut_tokyo <- min(unlist(dates_tokyo))\nfin_tokyo <- max(unlist(dates_tokyo))\ndebut_paris <- min(unlist(dates_paris))\n\n# Calcul des intervalles en jours\njours_entre_rio_tokyo <- as.integer(debut_tokyo - fin_rio)\njours_entre_tokyo_paris <- as.integer(debut_paris - fin_tokyo)\n\n# Conversion des jours en semaines\nsemaines_entre_rio_tokyo <- jours_entre_rio_tokyo / 7\nsemaines_entre_tokyo_paris <- jours_entre_tokyo_paris / 7\n\n# Affichage des résultats\nprint(paste(\"Nombre de jours entre Rio et Tokyo:\", jours_entre_rio_tokyo))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Nombre de jours entre Rio et Tokyo: NA\"\n```\n:::\n\n```{.r .cell-code}\nprint(paste(\"Nombre de semaines entre Rio et Tokyo:\", semaines_entre_rio_tokyo))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Nombre de semaines entre Rio et Tokyo: NA\"\n```\n:::\n\n```{.r .cell-code}\nprint(paste(\"Nombre de jours entre Tokyo et Paris:\", jours_entre_tokyo_paris))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Nombre de jours entre Tokyo et Paris: 1099\"\n```\n:::\n\n```{.r .cell-code}\nprint(paste(\"Nombre de semaines entre Tokyo et Paris:\", semaines_entre_tokyo_paris))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Nombre de semaines entre Tokyo et Paris: 157\"\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}