{
  "hash": "1128810005d359e95ad92dca32f6a7d9",
  "result": {
    "markdown": "---\ntitle: \"Exercice2\"\nauthor: \"Angel SINEAU\"\nformat: html\neditor: visual\n---\n\n\n## Exercices - Semaine 2\n\n## M1 ECAP - 2023/24\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rvest)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: le package 'rvest' a été compilé avec la version R 4.3.3\n```\n:::\n\n```{.r .cell-code}\nlibrary(purrr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: le package 'purrr' a été compilé avec la version R 4.3.3\n```\n:::\n:::\n\n\n#### 1.Lancez la commande suivante :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist_tables <- session(\"https://fr.wikipedia.org/wiki/Liste_des_m%C3%A9daill%C3%A9s_olympiques\") |> html_elements(\".wikitable\") |> html_table()\n```\n:::\n\n\n#### Que s’est-il passé ? Que contient l’objet list_tables ?\n\nNous obtenons une liste de dataframes, chaque dataframe représentant un tableau différent extrait de la page Wikipedia.\n\n#### 2. Nous allons tout d’abord nous intéresser à la première table. Créez un objet intitulé data_medailles_sport_ete contenant le premier élément de list_tables. La table n’est pas bien formattée. Supprimez la première colonne, les noms de colonnes et la première ligne. Renommez les colonnes en c(\"Discipline\", \"Annees\", \"Editions\", \"Epreuves_2020\", \"Or\", \"Argent\", \"Bronze\", \"Total\", \"Athletes_medailles\", \"Athletes_or\"). Les colonnes Editions, Epreuves_2020, Or, Argent, Bronze, Total seront converties en colonnes d’entiers.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Création de l'objet data_medailles_sport_ete\ndata_medailles_sport_ete <- list_tables[[1]]\n\n# Suppression de la première colonne\ndata_medailles_sport_ete <- data_medailles_sport_ete[, -1]\n\n# Suppression des noms de colonnes actuels et de la première ligne\ncolnames(data_medailles_sport_ete) <- NULL\ndata_medailles_sport_ete <- data_medailles_sport_ete[-1, ]\n\n# Renommage des colonnes\ncolnames(data_medailles_sport_ete) <- c(\"Discipline\", \"Annees\", \"Editions\", \"Epreuves_2020\", \"Or\", \"Argent\", \"Bronze\", \"Total\", \"Athletes_medailles\", \"Athletes_or\")\n\n# Conversion des colonnes Editions, Epreuves_2020, Or, Argent, Bronze, Total en entiers\ncols_to_convert <- c(\"Editions\", \"Epreuves_2020\", \"Or\", \"Argent\", \"Bronze\", \"Total\")\ndata_medailles_sport_ete[cols_to_convert] <- lapply(data_medailles_sport_ete[cols_to_convert], as.integer)\n```\n:::\n\n\n#### 3.Quelles sont les 3 disciplines avec le plus de médailles distribuées depuis le début de l’histoire des jeux olympiques ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Création de data_medailles_sport_ete avec le premier élément de list_tables\ndata_medailles_sport_ete <- list_tables[[1]]\n\n# Suppression de la première colonne, des noms de colonnes et de la première ligne\ndata_medailles_sport_ete <- data_medailles_sport_ete[-1, -1]\n\n# Renommage des colonnes\ncolnames(data_medailles_sport_ete) <- c(\"Discipline\", \"Annees\", \"Editions\", \"Epreuves_2020\", \"Or\", \"Argent\", \"Bronze\", \"Total\", \"Athletes_medailles\", \"Athletes_or\")\n\n# Conversion des colonnes Editions, Epreuves_2020, Or, Argent, Bronze, Total en entiers\ncols_to_convert <- c(\"Editions\", \"Epreuves_2020\", \"Or\", \"Argent\", \"Bronze\", \"Total\")\ndata_medailles_sport_ete[cols_to_convert] <- lapply(data_medailles_sport_ete[cols_to_convert], as.integer)\n\n# Trouver les 3 disciplines avec le plus de médailles\ntop_disciplines <- head(data_medailles_sport_ete[order(-data_medailles_sport_ete$Total), \"Discipline\"], 3)\n\n# Afficher les résultats\nprint(\"Les 3 disciplines avec le plus de médailles distribuées depuis le début de l’histoire des jeux olympiques sont :\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Les 3 disciplines avec le plus de médailles distribuées depuis le début de l’histoire des jeux olympiques sont :\"\n```\n:::\n\n```{.r .cell-code}\nprint(top_disciplines)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 1\n  Discipline              \n  <chr>                   \n1 Athlétisme              \n2 Natation(hommes, femmes)\n3 Lutte                   \n```\n:::\n:::\n\n\nAinsi, nous observons que l'Athlétisme, la Natation, et la Lutte sont les 3 disciplines avec le plus de médailles distribuées depuis le début de l’histoire des jeux olympiques.\n\n#### 4.Quelles sont les disciplines avec le moins d’épreuves en 2020 ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Trier les données par le nombre d'épreuves en 2020\ndata_triée <- data_medailles_sport_ete[order(data_medailles_sport_ete$Epreuves_2020), ]\n\n# Sélectionner les disciplines avec le moins d'épreuves\ndisciplines_moins_epreuves <- head(data_triée)\n\n# Afficher les résultats\nprint(disciplines_moins_epreuves$Discipline)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Football\"              \"Golf\"                  \"Handball\"             \n[4] \"Hockey sur gazon\"      \"Natation synchronisée\" \"Pentathlon moderne\"   \n```\n:::\n:::\n\n\nLes disciplines avec le moins d'épreuves en 2020 sont :\n\n-   Le Football\n\n-   Le Golf\n\n-   Le Handball\n\n-   Le Hockey sur gazon\n\n-   La Natation sychronisée\n\n-   Le pentathlon moderne.\n\n#### 5. La colonne Editions nous renseigne sur le nombre total d’apparence des disciplines aux JO d’été. Nous souhaitons vérifier ce calcul en implémentant notre propre fonction calcul_nb_editions_int. Dans un premier temps, la fonction calcul_nb_editions prendra en entrée un paramètre depuis, de type entier, qui représente depuis quelle année la discipline est au programme.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalcul_nb_editions_int <- function(depuis) {\n    # Années des jeux olympiques d'été, avec les annulations de 1940 et 1944\n    jeux_olympiques_annees <- seq(1896, 2020, by = 4)\n    jeux_olympiques_annees <- jeux_olympiques_annees[!jeux_olympiques_annees %in% c(1940, 1944)]\n    \n    # Compter le nombre d'éditions depuis l'année spécifiée\n    nombre_editions <- sum(jeux_olympiques_annees >= depuis)\n    \n    return(nombre_editions)\n}\n```\n:::\n\n\n#### 6. Dans certains cas, les disciplines ont été au programme de façon discontinue. Proposez une nouvelle fonction calcul_nb_editions_str qui prendra cette fois-ci en entrée des chaînes de caractères. Par exemple, l’appel suivant: calcul_nb_editions_str(\"1896, 1904, depuis 1920\") retournera la valeur 26.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalcul_nb_editions_str <- function(chaine_annees) {\n    # Années des jeux olympiques d'été, avec les annulations de 1940 et 1944\n    jeux_olympiques_annees <- seq(1896, 2020, by = 4)\n    jeux_olympiques_annees <- jeux_olympiques_annees[!jeux_olympiques_annees %in% c(1940, 1944)]\n    \n    # Découper la chaîne de caractères en morceaux\n    annees_parts <- strsplit(chaine_annees, \", \")[[1]]\n    \n    # Initialiser un vecteur pour stocker toutes les années mentionnées\n    toutes_annees <- numeric(0)\n    \n    for (part in annees_parts) {\n        if (grepl(\"depuis\", part)) {\n            # Extraire l'année et ajouter toutes les années depuis cette année\n            depuis_annee <- as.numeric(sub(\"depuis \", \"\", part))\n            toutes_annees <- c(toutes_annees, jeux_olympiques_annees[jeux_olympiques_annees >= depuis_annee])\n        } else {\n            # Ajouter l'année spécifique\n            toutes_annees <- c(toutes_annees, as.numeric(part))\n        }\n    }\n    \n    # Compter les éditions uniques\n    nombre_editions <- length(unique(toutes_annees))\n    \n    return(nombre_editions)\n}\n\n# Test de la fonction\ncalcul_nb_editions_str(\"1896, 1904, depuis 1920\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 26\n```\n:::\n:::\n\n\n#### 7. Définissez une fonction générique calcul_nb_editions et deux implémentations calcul_nb_editions.integer et ‘calcul_nb_editions.character. Quels résultats donnent les appels : calcul_nb_editions(2000) calcul_nb_editions(\"1904–1924, depuis 1948\") ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalcul_nb_editions_str <- function(chaine_annees) {\n    # Années des jeux olympiques d'été, avec les annulations de 1940 et 1944\n    jeux_olympiques_annees <- seq(1896, 2020, by = 4)\n    jeux_olympiques_annees <- jeux_olympiques_annees[!jeux_olympiques_annees %in% c(1940, 1944)]\n    \n    # Découper la chaîne de caractères en morceaux\n    annees_parts <- strsplit(chaine_annees, \", \")[[1]]\n    \n    # Initialiser un vecteur pour stocker toutes les années mentionnées\n    toutes_annees <- numeric(0)\n    \n    for (part in annees_parts) {\n        if (grepl(\"depuis\", part)) {\n            # Extraire l'année et ajouter toutes les années depuis cette année\n            depuis_annee <- as.numeric(sub(\"depuis \", \"\", part))\n            toutes_annees <- c(toutes_annees, jeux_olympiques_annees[jeux_olympiques_annees >= depuis_annee])\n        } else {\n            # Ajouter l'année spécifique\n            toutes_annees <- c(toutes_annees, as.numeric(part))\n        }\n    }\n    \n    # Compter les éditions uniques\n    nombre_editions <- length(unique(toutes_annees))\n    \n    return(nombre_editions)\n}\n\n# Test de la fonction\ncalcul_nb_editions_str(\"1896, 1904, depuis 1920\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 26\n```\n:::\n\n```{.r .cell-code}\n# Fonction générique\ncalcul_nb_editions <- function(x) {\n    UseMethod(\"calcul_nb_editions\", x)\n}\n\n# Implémentation pour integer\ncalcul_nb_editions.integer <- function(depuis) {\n    jeux_olympiques_annees <- seq(1896, 2020, by = 4)\n    jeux_olympiques_annees <- jeux_olympiques_annees[!jeux_olympiques_annees %in% c(1940, 1944)]\n    sum(jeux_olympiques_annees >= depuis)\n}\n\n# Implémentation pour character\ncalcul_nb_editions.character <- function(periodes) {\n    jeux_olympiques_annees <- seq(1896, 2020, by = 4)\n    jeux_olympiques_annees <- jeux_olympiques_annees[!jeux_olympiques_annees %in% c(1940, 1944)]\n    periodes <- gsub(\"depuis \", \"\", periodes)\n    periodes <- gsub(\"–\", \"-\", periodes)\n    periodes_separes <- unlist(strsplit(periodes, \", \"))\n    total <- 0\n    for (periode in periodes_separes) {\n        if (grepl(\"-\", periode)) {\n            annees <- as.numeric(unlist(strsplit(periode, \"-\")))\n            total <- total + sum(jeux_olympiques_annees >= annees[1] & jeux_olympiques_annees <= annees[2])\n        } else {\n            total <- total + sum(jeux_olympiques_annees >= as.numeric(periode))\n        }\n    }\n    return(total)\n}\n\n# Tests des fonctions\nprint(calcul_nb_editions(2000L))  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n:::\n\n\nCes fonctions calculeront le nombre d'éditions des Jeux Olympiques d'été auxquelles une discipline a participé, soit depuis une année donnée (integer), soit pendant des périodes spécifiées (character).\n\nLes appels **`calcul_nb_editions(2000)`** et **`calcul_nb_editions(\"1904-1924, depuis 1948\")`** nous donnent respectivement le nombre d'éditions depuis l'année 2000 et pour les périodes 1904-1924 et depuis 1948, soit 6 éditions.\n\n#### 8. En Athlétisme, le Finlandais Paavo Nurmi détient le record de médailles avec 12 médailles obtenues lors des JO d’hiver. Implémentez une fonction calcul_medailles_individuelles qui détermine le nombre de médaille maximal a été obtenu par un athlète lors d’olympiades. Note : s’il y a plusieurs athlètes à égalité, alors la cellule comporte plusieurs éléments, et une manipulation de la chaîne de caractères est nécessaire.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalcul_medailles_individuelles <- function(info_medailles) {\n    # Séparer les athlètes s'il y en a plusieurs\n    athletes <- unlist(strsplit(info_medailles, \",\"))\n    \n    # Extraire les nombres de médailles et convertir en entiers\n    nombre_medailles <- sapply(athletes, function(athlete) {\n        if(grepl(\"\\\\d+\", athlete)) {\n            max(as.numeric(unlist(regmatches(athlete, gregexpr(\"\\\\d+\", athlete)))))\n        } else {\n            0\n        }\n    })\n    \n    # Déterminer le nombre maximal de médailles\n    max_medailles <- max(nombre_medailles)\n    \n    return(max_medailles)\n}\n```\n:::\n\n\nCette fonction permettra de déterminer le nombre maximal de médailles obtenues par un athlète, même dans des cellules où plusieurs athlètes sont mentionnés.\n\n#### 9. Quel est le top 3 des athlètes ? Vous utiliserez la fonction lapply pour appliquer la fonction calcul_medailles_individuelles à chaque élément de la colonne Athletes_medailles.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalcul_medailles_individuelles <- function(medailles) {\n    # Vérifier si l'entrée est NA\n    if (is.na(medailles)) {\n        return(NA)\n    }\n    \n    # Séparer les entrées pour chaque athlète\n    athletes <- strsplit(medailles, \", \")[[1]]\n    \n    # Initialiser un vecteur pour stocker le nombre total de médailles par athlète\n    nombre_medailles_total <- numeric(length(athletes))\n\n    # Boucle sur chaque athlète pour extraire le nombre total de médailles\n    for (i in seq_along(athletes)) {\n        # Extraire les nombres de médailles de l'athlète courant\n        medailles_athlete <- unlist(strsplit(athletes[i], \" \"))\n\n        # Convertir les nombres en entiers et sommer\n        nombre_medailles_total[i] <- sum(as.numeric(medailles_athlete[sapply(medailles_athlete, is.numeric)]))\n    }\n\n    # Retourner le nombre maximal de médailles\n    max(nombre_medailles_total, na.rm = TRUE)\n}\n\n# Appliquer la fonction à chaque élément de la colonne Athletes_medailles\ntop_medailles <- lapply(data_medailles_sport_ete$Athletes_medailles, calcul_medailles_individuelles)\n\n# Déterminer le top 3 des athlètes\ntop_3 <- sort(unlist(top_medailles), decreasing = TRUE)[1:3]\n\n# Afficher le top 3\nprint(top_3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0 0 0\n```\n:::\n:::\n\n\n#### 10. Quels sont les 3 nationalités les plus représentées, pour toutes les épreuves, au classement du nombre de médailles d’or individuelles reccueillies ? • Pour ce faire, vous implémenterez une fonction extraire_nationalite_athlete qui à partir d’une chaine de charactère extraira le nombre d’athlète et leur nationalité. Par exemple, la chaine de caractère “Paavo Nurmi (FIN) (9-3-0) Carl Lewis (USA) (9-1-0)” donnera en sortie c(\"FIN\" = 1, \"USA\" = 1). • Vous utilisez la fonction lapply pour appliquer la fonction à toute la colonne 2 • Vous agrégerez les résultats de manière à sommer toutes les lignes et à obtenir les 3 nations les plus représentées, et leur effectif.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Définition de la fonction\nextraire_nationalite_athlete <- function(texte) {\n    # Extraire les codes de nationalité et les occurences d'athlètes\n    # Le code ici dépend de la structure exacte de vos données\n    # Par exemple, vous pouvez utiliser des expressions régulières pour extraire les informations nécessaires\n}\n\n# Application de la fonction à la colonne\nresultats <- lapply(data_medailles_sport_ete$Athletes_medailles, extraire_nationalite_athlete)\n\n# Agrégation des résultats\nnationalites <- table(unlist(resultats))\n\n# Tri et identification des trois premières nationalités\ntop3_nationalites <- sort(nationalites, decreasing = TRUE)[1:3]\n```\n:::\n\n\n#### 11. Intéressez-vous désormais au deuxième tableau contenu dans list_tables, faisant référence aux JO d’hiver. Appliquez les fonctions calcul_medailles_individuelles et extraire_nationalite_athlete aux deux dernières colonnes, à la manière des questions 9 et 10. Cette fois-ci, vous utiliserez la fonction appropriée du package purrr en lieu et place de lapply. Quelles sont les résultats ? Quelle différence voyez-vous entre lapply et les fonctions de purrr ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(purrr)\n\n# Supposons que data_medailles_hiver est le deuxième tableau de list_tables\ndata_medailles_hiver <- list_tables[[2]]\n\n# Application de calcul_medailles_individuelles sur la colonne appropriée\ntop_medailles_hiver <- map_int(data_medailles_hiver$Athletes_medailles, calcul_medailles_individuelles)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Unknown or uninitialised column: `Athletes_medailles`.\n```\n:::\n\n```{.r .cell-code}\n# Application de extraire_nationalite_athlete sur la colonne appropriée\nnationalites_hiver <- map(data_medailles_hiver$Athletes_medailles, extraire_nationalite_athlete)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Unknown or uninitialised column: `Athletes_medailles`.\n```\n:::\n\n```{.r .cell-code}\n# Traitement supplémentaire si nécessaire pour obtenir le résultat souhaité\n# Par exemple, vous pouvez utiliser reduce pour combiner les résultats de nationalites_hiver\n\n# Affichage des résultats\nprint(top_medailles_hiver)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ninteger(0)\n```\n:::\n\n```{.r .cell-code}\nprint(nationalites_hiver)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nlist()\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}